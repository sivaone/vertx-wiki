package io.vertx.starter;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Context;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpServer;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.asyncsql.PostgreSQLClient;
import io.vertx.ext.sql.SQLClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.templ.freemarker.FreeMarkerTemplateEngine;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.Collectors;

public class MainVerticle extends AbstractVerticle {

  private static final Logger LOGGER = LoggerFactory.getLogger(MainVerticle.class);
  private FreeMarkerTemplateEngine templateEngine;

  private static final String SQL_CREATE_PAGES_TABLE = "create table if not exists Pages (Id int GENERATED BY DEFAULT AS IDENTITY primary key, Name varchar(255) unique, Content TEXT)";
  private static final String SQL_GET_PAGE = "select Id, Content from Pages where Name = ?";
  private static final String SQL_CREATE_PAGE = "insert into Pages values (NULL, ?, ?)";
  private static final String SQL_SAVE_PAGE = "update Pages set Content = ? where Id = ?";
  private static final String SQL_ALL_PAGES = "select Name from Pages";
  private static final String SQL_DELETE_PAGE = "delete from Pages where Id = ?";


  private SQLClient sqlClient;

  @Override
  public void init(Vertx vertx, Context context) {
    super.init(vertx, context);
    JsonObject postgresSQLClientConfig = new JsonObject()
      .put("host", "localhost")
      .put("username", "siva").put("password", "siva")
      .put("database", "mydb").put("maxPoolSize", 20);
    sqlClient = PostgreSQLClient.createNonShared(vertx, postgresSQLClientConfig);
    templateEngine = FreeMarkerTemplateEngine.create(vertx);
  }

  @Override
  public void stop() throws Exception {
    sqlClient.close();
  }

  /*@Override
  public void start() {
    vertx.createHttpServer()
        .requestHandler(req -> req.response().end("Hello Vert.x!"))
        .listen(8080);
  }*/

  @Override
  public void start(Future<Void> startFuture) {
    Future<Void> steps = prepareDatabase().compose(v -> startHttpServer());
    steps.setHandler(startFuture.completer());
  }

  private void pageDeleteHandler(RoutingContext routingContext) {

  }

  private void pageCreateHandler(RoutingContext routingContext) {

  }

  private void pageUpdateHandler(RoutingContext routingContext) {

  }

  private void pageRenderingHandler(RoutingContext routingContext) {

  }

  private void indexHandler(RoutingContext context) {

    sqlClient.getConnection(ar -> {
      if(ar.failed()) {
        context.fail(ar.cause());
      } else {
        SQLConnection connection = ar.result();
        connection.query(SQL_ALL_PAGES, all -> {
          connection.close();

          if(all.succeeded()) {
            List<String> pages = all.result().getResults().stream()
              .map(json -> json.getString(0)).sorted().collect(Collectors.toList());
            JsonObject jsonObject = new JsonObject();
            jsonObject.put("title", "Wiki Home");
            jsonObject.put("pages", pages);
            templateEngine.render(jsonObject, "templates/index.ftl", tar -> {
              if(tar.succeeded()) {
                context.response().putHeader("Content-Type", "text/html");
                context.response().end(tar.result());
              } else {
                context.fail(tar.cause());
              }
            });
          } else {
            context.fail(all.cause());
          }
        });
      }
    });
  }

  private Future<Void> prepareDatabase() {
    Future<Void> future = Future.future();
    sqlClient.getConnection(ar -> {
      if(ar.failed()) {
        LOGGER.error("Cannot connect to database", ar.cause());
        future.fail(ar.cause());
      } else {
        SQLConnection connection = ar.result();
        connection.execute(SQL_CREATE_PAGES_TABLE, create -> {
          connection.close();
          if(create.failed()) {
            LOGGER.error("Creation of table failed", create.cause());
            future.fail(create.cause());
          } else {
            future.complete();
          }
        });
      }
    });
    return future;
  }

  private Future<Void> startHttpServer() {
    Future<Void> future = Future.future();
    System.out.println("vertx is :"+vertx);
    HttpServer server = vertx.createHttpServer();

    Router router = Router.router(vertx);
    router.get("/").handler(this::indexHandler);
    router.get("/wiki/:page").handler(this::pageRenderingHandler);
    router.post().handler(BodyHandler.create());
    router.post("/save").handler(this::pageUpdateHandler);
    router.post("/create").handler(this::pageCreateHandler);
    router.post("/delete").handler(this::pageDeleteHandler);

    server.requestHandler(router)
      .listen(8080, ar -> {
        if(ar.succeeded()) {
          LOGGER.info("Http server running on port 8080");
          future.complete();
        } else {
          LOGGER.info("Http server could not be started", ar.cause());
          future.fail(ar.cause());
        }
      });
    return future;
  }


}
